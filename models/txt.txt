from sklearn.ensemble import GradientBoostingRegressor

def train_and_evaluate_sheet(df, sheet_name, feature_cols, target_fifa, target_real, use_weighted_features=True):
    print(f"\n===== Processing Sheet: {sheet_name} =====")

    missing_features = [col for col in feature_cols if col not in df.columns]
    if missing_features:
        print(f"Warning: Missing features in {sheet_name}: {missing_features}")
        feature_cols = [col for col in feature_cols if col in df.columns]
        if not feature_cols:
            print("No valid features found. Skipping.")
            return None

    has_fifa_target = target_fifa in df.columns
    has_real_target = target_real in df.columns

    if not has_fifa_target and not has_real_target:
        print(f"Skipping {sheet_name}: No target columns found.")
        return None

    if use_weighted_features:
        df_weighted, weighted_feature_cols = apply_position_weights(df, sheet_name, feature_cols)
        X = df_weighted[weighted_feature_cols] if weighted_feature_cols else df[feature_cols]
        features_used = weighted_feature_cols if weighted_feature_cols else feature_cols
    else:
        X = df[feature_cols]
        features_used = feature_cols

    results = {'sheet_name': sheet_name, 'feature_cols': features_used}

    def train_and_eval_model(model_cls, X, y, label_prefix):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = model_cls()
        model.fit(X_train, y_train)
        preds = model.predict(X_test)
        r2 = r2_score(y_test, preds)
        rmse = np.sqrt(mean_squared_error(y_test, preds))

        print(f"--- {sheet_name} - {label_prefix} ---")
        print(f"RÂ²: {r2:.3f}, RMSE: {rmse:.3f}")
        plot_importance(model, features_used, f"{label_prefix} ({sheet_name})")
        plt.savefig(f"{label_prefix.replace(' ', '_')}_{sheet_name.replace(' ', '_')}.png")
        plt.close()

        return model, r2, rmse, model.feature_importances_

    if has_fifa_target:
        y_fifa = df[target_fifa]
        # Random Forest
        rf_model, rf_r2, rf_rmse, rf_importances = train_and_eval_model(
            lambda: RandomForestRegressor(random_state=42), X, y_fifa, "FIFA RF Rating"
        )
        results.update({
            'fifa_rf_model': rf_model,
            'fifa_rf_r2': rf_r2,
            'fifa_rf_rmse': rf_rmse,
            'fifa_rf_importances': rf_importances
        })
        # Gradient Boosting
        gb_model, gb_r2, gb_rmse, gb_importances = train_and_eval_model(
            lambda: GradientBoostingRegressor(random_state=42), X, y_fifa, "FIFA GB Rating"
        )
        results.update({
            'fifa_gb_model': gb_model,
            'fifa_gb_r2': gb_r2,
            'fifa_gb_rmse': gb_rmse,
            'fifa_gb_importances': gb_importances
        })

    if has_real_target:
        y_real = df[target_real]
        # Random Forest
        rf_model, rf_r2, rf_rmse, rf_importances = train_and_eval_model(
            lambda: RandomForestRegressor(random_state=42), X, y_real, "Real RF Rating"
        )
        results.update({
            'real_rf_model': rf_model,
            'real_rf_r2': rf_r2,
            'real_rf_rmse': rf_rmse,
            'real_rf_importances': rf_importances
        })
        # Gradient Boosting
        gb_model, gb_r2, gb_rmse, gb_importances = train_and_eval_model(
            lambda: GradientBoostingRegressor(random_state=42), X, y_real, "Real GB Rating"
        )
        results.update({
            'real_gb_model': gb_model,
            'real_gb_r2': gb_r2,
            'real_gb_rmse': gb_rmse,
            'real_gb_importances': gb_importances
        })

    return results